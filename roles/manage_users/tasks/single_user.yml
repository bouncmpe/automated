# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/group_module.html
# https://docs.ansible.com/ansible/latest/collections/ansible/posix/authorized_key_module.html
# https://docs.ansible.com/ansible/latest/collections/community/general/sudoers_module.html
---
- name: Manage the user {{ user.name }}
  ansible.builtin.user:
    name: "{{ user.name }}"
    home: "{{ automated_config_home_directory | default('/home') }}/{{ user.name }}"
    state: "{{ user.state | default(omit) }}"
    remove: "{{ user.remove | default(true) }}"
    group: "{{ user.primary_group | default(omit) }}"
    groups: "{{ user.groups | default(omit) }}"
    comment: "{{user.gecos | default(omit) }}"
    password_lock: "{{ user.lock_passwd | default(true) }}"
    create_home: "{{user.create_home | default(automated_config_users_create_home) }}" 
    uid: "{{ user.uid | default(omit) }}"
    password: "{{ user.passwd | default(omit) }}"
    generate_ssh_key: "{{ automated_config_users_create_home }}"
    ssh_key_type: "{{ user.ssh_key_type | default('ed25519') }}"
    ssh_key_file: "{{ user.ssh_key_type | default('.ssh/id_ed25519') }}" 
    shell: "{{ user.shell | default('/bin/bash') }}"  
    system: "{{ user.system | default(false) }}"
    update_password: "on_create"

- name: Manage the public SSH keys on GitHub server for {{ user.name }}
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    key: https://github.com/{{ github_id }}.keys
    state: "{{ user.state | default(omit) }}"
  loop: "{{ user.ssh_import_id | map('regex_replace', '^gh:(.*)$', '\\1') | list }}"
  when: user.ssh_import_id is defined and automated_config_users_create_home
  loop_control:
    loop_var: github_id

- name: Manage the public SSH keys on {{ user.name }}
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    key: "{{ user.ssh_authorized_keys }}"
    state: "{{ user.state | default(omit) }}"
  when: user.ssh_authorized_keys is defined and automated_config_users_create_home

- name: Manage sudoers
  community.general.sudoers:
    name: "{{ user.name | replace('.', '-') }}" # sudoers.d filename must be dot-free
    user: "{{ user.name }}"
    state: present
    commands: "{{ user.sudoers.commands | default('ALL') }}"
    nopassword: "{{ user.sudoers.nopassword | default(omit) }}"
    runas: "{{ user.sudoers.runas | default(omit) }}"
  when: user.sudoers is defined

- name: Manage sudoers when absent
  community.general.sudoers:
    name: "{{ user.name | replace('.', '-') }}" # sudoers.d filename must be dot-free
    state: absent
  when: user.sudoers is undefined or user.state == 'absent'
